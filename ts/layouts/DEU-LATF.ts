/// <reference path="../keyboard.ts" />

namespace Keyboard {
  defineKeyboard({
    name: "<b>DEU</b>\n<small>(LATF)</small>",
    code: "DEU-LATF",
    description: "Deutsch\nDeutsch (Lateinisch-Fraktur)",
    version: "2018.04.25",
    keyMaps: {
      shift: {
        AltLeft: ["Alt", "Alt"],
        Backspace: ["\u27f5", "Backspace"],
        Comma: ";",
        ControlLeft: ["Strg", "Control"],
        Digit0: "=",
        Digit1: "!",
        Digit2: "\"",
        Digit3: "§",
        Digit4: "?",
        Digit5: "%",
        Digit6: "&",
        Digit7: "/",
        Digit8: "(",
        Digit9: ")",
        Enter: ["\u21b2", "Enter"],
        KeyA: "𝔄",
        KeyB: "𝔅",
        KeyC: "ℭ",
        KeyD: "𝔇",
        KeyE: "𝔈",
        KeyF: "𝔉",
        KeyG: "𝔊",
        KeyH: "ℌ",
        KeyI: "ℑ",
        KeyJ: "𝔍",
        KeyK: "𝔎",
        KeyL: "𝔏",
        KeyM: "𝔐",
        KeyN: "𝔑",
        KeyO: "𝔒",
        KeyP: "𝔓",
        KeyQ: "𝔔",
        KeyR: "ℜ",
        KeyS: "𝔖",
        KeyT: "𝔗",
        KeyU: "𝔘",
        KeyV: "𝔙",
        KeyW: "𝔚",
        KeyX: "𝔛",
        KeyY: "ℨ",
        KeyZ: "𝔜",
        Language: ["DEU", "Language"],
        Period: ":",
        ShiftLeft: ["\u21d1", "Shift"],
        Space: ["\u23b5", "Space"]
      },
      ctrlAlt: {
        AltLeft: ["Alt", "Alt"],
        Backspace: ["\u27f5", "Backspace"],
        ControlLeft: ["Strg", "Control"],
        Digit1: "$",
        Digit2: "²",
        Digit3: "³",
        Digit4: "^",
        Digit5: "°",
        Digit6: "|",
        Digit7: "{",
        Digit8: "[",
        Digit9: "]",
        Digit0: "}",
        Enter: ["\u21b2", "Enter"],
        KeyD: "#",
        KeyE: "€",
        KeyF: "*",
        KeyG: "+",
        KeyH: "-",
        KeyI: "<",
        KeyJ: "_",
        KeyK: "~",
        KeyM: "µ",
        KeyP: ">",
        KeyQ: "@",
        KeyR: "`",
        KeyS: "ſ",
        KeyT: "'",
        KeyW: "\\",
        KeyY: "´",
        Language: ["DEU", "Language"],
        ShiftLeft: ["\u21d1", "Shift"],
        Space: ["\u23b5", "Space"]
      }
    },
    keyMap: {
      AltLeft: ["Alt", "Alt"],
      Backspace: ["\u27f5", "Backspace"],
      Comma: ",",
      ControlLeft: ["Strg", "Control"],
      Digit0: "0",
      Digit1: "1",
      Digit2: "2",
      Digit3: "3",
      Digit4: "4",
      Digit5: "5",
      Digit6: "6",
      Digit7: "7",
      Digit8: "8",
      Digit9: "9",
      Enter: ["\u21b2", "Enter"],
      KeyA: "𝔞",
      KeyB: "𝔟",
      KeyC: "𝔠",
      KeyD: "𝔡",
      KeyE: "𝔢",
      KeyF: "𝔣",
      KeyG: "𝔤",
      KeyH: "𝔥",
      KeyI: "𝔦",
      KeyJ: "𝔧",
      KeyK: "𝔨",
      KeyL: "𝔩",
      KeyM: "𝔪",
      KeyN: "𝔫",
      KeyO: "𝔬",
      KeyP: "𝔭",
      KeyQ: "𝔮",
      KeyR: "𝔯",
      KeyS: "𝔰",
      KeyT: "𝔱",
      KeyU: "𝔲",
      KeyV: "𝔳",
      KeyW: "𝔴",
      KeyX: "𝔵",
      KeyY: "𝔷",
      KeyZ: "𝔶",
      Language: ["DEU", "Language"],
      Period: ".",
      ShiftLeft: ["\u21d1", "Shift"],
      Space: ["\u23b5", "Space"]
    },
    layout: [
      "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0",
      "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP",
      null, "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", null,
      "#ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "#Backspace:4",
      "#Language:3", "#ControlLeft", "Comma", "#Space:6", "Period", "#AltLeft", "#Enter:3"
    ],
    getKeyMap(): false | KeyMap {
      if (hasFlag(this.modifiers, MODIFIER_SHIFT | MODIFIER_CTRL | MODIFIER_ALT) == (MODIFIER_SHIFT | MODIFIER_CTRL | MODIFIER_ALT)) {
        return this.keyMaps.shift;
      } else if (hasFlag(this.modifiers, MODIFIER_CTRL | MODIFIER_ALT) == (MODIFIER_CTRL | MODIFIER_ALT)) {
        return this.keyMaps.ctrlAlt;
      } else if (hasFlag(this.modifiers, MODIFIER_SHIFT) == MODIFIER_SHIFT) {
        return this.keyMaps.shift;
      } else {
        return this.keyMap;
      }
    },
    keyBindings: []
  });
}